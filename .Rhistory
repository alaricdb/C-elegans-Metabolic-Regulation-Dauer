import cobra
from cobra.io import read_sbml_model
gc()
library(Seurat)
library(Seurat)
packer_Seurat_neurons <- readRDS(file = "/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/RDS_files/packer_Seurat_neurons.rds")
# Extract gene list from Seurat object
seurat_genes <- rownames(packer_Seurat_neurons@assays$RNA@cells)
# Read the list of genes from the iCEL1314 model
icel1314_genes <- read.csv("/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/iCEL1314_genes.csv", stringsAsFactors = FALSE)
model_genes <- icel1314_genes$ID
# Check if all the model genes are present in the Seurat gene list
genes_present <- model_genes %in% seurat_genes
# If any genes are missing, they will be FALSE
missing_genes <- model_genes[!genes_present]
View(icel1314_genes)
model_genes
seurat_genes
# Assuming 'convert_to_WBGene' is a function that converts Seurat gene sequences to "WBGene" IDs
seurat_genes <- convert_to_WBGene(rownames(packer_Seurat_neurons@assays$RNA@cells))
source("~/.active-rstudio-document", echo=TRUE)
library(Seurat)
packer_Seurat_neurons <- readRDS(file = "/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/RDS_files/packer_Seurat_neurons.rds")
View(packer_Seurat_neurons)
# Extract gene list from Seurat object
seurat_genes <- rownames(packer_Seurat_neurons@assays$RNA@cells)
seurat_genes
# Read the list of genes from the iCEL1314 model
icel1314_genes <- read.csv("/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/iCEL1314_genes.csv", stringsAsFactors = FALSE)
model_genes <- icel1314_genes$ID
gc()
library(Seurat)
packer_Seurat_neurons <- readRDS(file = "/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/RDS_files/packer_Seurat_neurons.rds")
# Extract gene list from Seurat object
seurat_genes <- rownames(packer_Seurat_neurons@assays$RNA@cells)
# Read the list of genes from the iCEL1314 model
icel1314_genes <- read.csv("/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/iCEL1314_genes.csv", stringsAsFactors = FALSE)
model_genes <- icel1314_genes$ID
library(Seurat)
library(Seurat)
library(rtacklayer)
library(tidyverse)
library(Seurat)
library(gprofiler2)
library(stringr)
GSE126954_cell_annotation <- read.csv("/media/cdn-bc/RAID/StudentProjects/Alaric/originals/GSE126954_cell_annotation.csv")
GSE126954_gene_annotation <- read.csv("/media/cdn-bc/RAID/StudentProjects/Alaric/originals/GSE126954_gene_annotation.csv")
GSE126954_gene_by_cell_count_matrix <- read.delim("/media/cdn-bc/RAID/StudentProjects/Alaric/originals/GSE126954_gene_by_cell_count_matrix.txt", sep = " ", header = F, skip = 2)
# Rename columns in the gene-by-cell count matrix for clarity
names(GSE126954_gene_by_cell_count_matrix) <- c("Genes", "Cells", "Counts")
# Convert the long format matrix to a wide format matrix, setting genes as columns, cells as rows, and filling missing values with 0
GSE126954_gene_matrix <- pivot_wider(GSE126954_gene_by_cell_count_matrix, names_from = Genes, values_from = Counts, id_cols = Cells, values_fill = 0)
# Remove the first column if it is an unnecessary index or placeholder
GSE126954_gene_matrix <- select(GSE126954_gene_matrix, -1)
# Convert the data frame to a matrix for downstream analysis
GSE126954_gene_matrix <- as.matrix(GSE126954_gene_matrix)
# Set the row names of the matrix to cell names for identification
rownames(GSE126954_gene_matrix) <- GSE126954_cell_annotation[,1]
# Map gene names to columns for clear gene identification
# Create a mapping table with index and gene short names
mapping_table <- data.frame(Index = 1:nrow(GSE126954_gene_annotation),
GeneName = GSE126954_gene_annotation$gene_short_name,
row.names = as.character(1:nrow(GSE126954_gene_annotation)))
View(mapping_table)
# Subset the mapping table to only include genes present in the matrix
subset_mapping <- mapping_table[colnames(GSE126954_gene_matrix), ]
# Update column names in the matrix with gene names from the mapping table
colnames(GSE126954_gene_matrix) <- subset_mapping$GeneName
GSE126954_gene_matrix_final[1:5],[1:5]
# Transpose the matrix to align rows with samples and columns with genes, as required for Seurat analysis
GSE126954_gene_matrix_final <- t(GSE126954_gene_matrix)
GSE126954_gene_matrix_final[1:5],[1:5]
View(GSE126954_gene_matrix_final[1:5, 1:5])
View(GSE126954_gene_annotation)
View(GSE126954_gene_annotation)
gc()
library(Seurat)
library(rtacklayer)
gc()
library(Seurat)
library(rtracklayer)
GSE126954_gene_annotation.gtf <- import("/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/GSE126954_gene_annotation.gtf")
GSE126954_gene_annotation.gtf <- import("/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/GSE126954_gene_annotation.gtf.gz")
GSE126954_gene_annotation.gtf <- import("/media/cdn-bc/RAID/StudentProjects/Alaric/originals/GSE126954_gene_annotation.gtf.gz")
gene_anotation_gtf <- as.data.frame(GSE126954_gene_annotation.gtf)
View(gene_anotation_gtf)
library(Seurat)
library(rtracklayer)
library(dplyr)
View(gene_anotation_gtf)
# Assuming 'gene_id' is the column name holding the gene identifiers
gene_anotation_gtf_unique <- gene_anotation_gtf %>% distinct(gene_id, .keep_all = TRUE)
View(gene_anotation_gtf_unique)
View(gene_anotation_gtf_unique)
gene_anotation_gtf <- gene_anotation_gtf %>% distinct(gene_id, .keep_all = TRUE)
# Selecting only gene_id and gene_name
gene_anotation_gtf <- select(gene_anotation_gtf, gene_id, gene_name)
View(gene_anotation_gtf)
# Remove duplicated gene_ids and select only gene_id and gene_name
gene_annotation_gtf <- gene_annotation_gtf %>%
distinct(gene_id, .keep_all = TRUE) %>%
select(gene_id, gene_name)
# Transform GTF file into a Dataframe
gene_annotation_gtf <- as.data.frame(GSE126954_gene_annotation.gtf)
# Remove duplicated gene_ids and select only gene_id and gene_name
gene_annotation_gtf <- gene_annotation_gtf %>%
distinct(gene_id, .keep_all = TRUE) %>%
select(gene_id, gene_name)
# Write the table to a text file
write.table(gene_annotation_gtf, file = "/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/gene_annotation_gtf.txt", sep = "\t", row.names = TRUE, col.names = NA)
# Write the table to a text file
write.table(gene_annotation_gtf, file = "/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/gene_annotation_gtf.txt",sep = "\t", row.names = FALSE, quote = FALSE)
View(gene_annotation_gtf)
# Write the table to a text file
write.table(gene_annotation_gtf, file = "/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/gene_annotation_gtf.txt",sep = "\t", row.names = TRUE, quote = FALSE)
# Write the table to a text file
write.table(gene_annotation_gtf, file = "/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/gene_annotation_gtf.txt",sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
View(gene_annotation_gtf)
gc()
reticulate::repl_python()
rna_mean_normalized = pd.read_csv('/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/rna_mean_normalized.txt', 'Delimiter', '\t');
rna_mean_normalized <- read.table('/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/rna_mean_normalized.txt', sep = "\t");
rna_mean_normalized <- read.table('/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/rna_mean_normalized.txt', sep = "\t")
View(rna_mean_normalized)
rna_mean_normalized <- read.table('/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/rna_mean_normalized.txt', sep = "\t")
colnames(rna_mean_normalized) <- c('gene', 'value')
View(rna_mean_normalized)
# Load Annotations
gene_annotation_gtf <- read.table('/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/gene_annotation_gtf.txt', header=TRUE, sep = "\t")
View(gene_annotation_gtf)
TGF-beta_signaling_genes <- c('daf-1', 'daf-4', 'daf-7', 'daf-8', 'daf-14')
TGF_beta_signaling_genes <- c('daf-1', 'daf-4', 'daf-7', 'daf-8', 'daf-14')
IIS_pathway_genes <- c('daf-2', 'age-1')
serotonin_genes <- c('tph-1')
steroid_hormone_signaling_genes <- c('daf-9')
View(rna_mean_normalized)
View(gene_annotation_gtf)
TGF_beta_signaling_genes <- c('daf-1', 'daf-4', 'daf-7', 'daf-8', 'daf-14')
IIS_pathway_genes <- c('daf-2', 'age-1')
serotonin_genes <- c('tph-1')
steroid_hormone_signaling_genes <- c('daf-9')
# Create a named vector where names are gene names and values are gene ids
gene_name_to_id <- setNames(gene_annotation_gtf$gene_id, gene_annotation_gtf$gene_name)
# Convert gene names to gene ids for each gene list
TGF_beta_signaling_genes_ids <- gene_name_to_id[TGF_beta_signaling_genes]
IIS_pathway_genes_ids <- gene_name_to_id[IIS_pathway_genes]
serotonin_genes_ids <- gene_name_to_id[serotonin_genes]
steroid_hormone_signaling_genes_ids <- gene_name_to_id[steroid_hormone_signaling_genes]
? GENIE3
??GENIE3
set.seed(123) # For reproducibility of results
# Load Seurat object
packer_Seurat_filtered <- readRDS(file = "/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/RDS_files/packer_Seurat_filtered.rds")
#weight_packer_Seurat_filtered <- GENIE3(packer_Seurat_filtered, regulators=ASI_var.feat, nCores=44)
#saveRDS(weightMat.ASI, file="../outputs/RDS/weightMat_ASI.Rds")
gc()
gc()
# Load required libraries
library(Seurat)
library(GENIE3)
library(igraph)
# Define gene sets
TGF_beta_signaling_genes <- c('daf-1', 'daf-4', 'daf-7', 'daf-8', 'daf-14')
IIS_pathway_genes <- c('daf-2', 'age-1')
serotonin_genes <- c('tph-1')
steroid_hormone_signaling_genes <- c('daf-9')
# Load the Seurat object
packer_Seurat_filtered <- readRDS("/media/cdn-bc/RAID/StudentProjects/Alaric/outputs/RDS_files/packer_Seurat_filtered.rds")
# Extract RNA assay data
expression_data <- GetAssayData(packer_Seurat_filtered, assay = "RNA", slot = "data")
# Assuming gene_names variable is defined somewhere before using it in GENIE3
# It's crucial to define gene_names that will be used as regulators in GENIE3
gene_names <- c(TGF_beta_signaling_genes, IIS_pathway_genes, serotonin_genes, steroid_hormone_signaling_genes)
# Run GENIE3 for gene regulatory network inference
grn <- GENIE3(expression_data, regulators = gene_names)
View(expression_data)
View(expression_data)
# Retrieve normalized data matrix from Seurat object to mitigate cell variability
rna_mean_normalized <- GetAssayData(object = packer_Seurat_filtered, assay = "RNA", slot = "data")
View(rna_mean_normalized)
expression_data <- GetAssayData(packer_Seurat_filtered, slot = "data")
View(expression_data)
expression_df <- as.data.frame(t(expression_data))
View(expression_data)
rna_normalized <- GetAssayData(object = packer_Seurat_filtered, assay = "RNA", slot = "data")
View(rna_normalized)
rna_normalized@x
library(Seurat)
library(Seurat)
library(tidyverse)
library(Seurat)
library(tidyverse)
packer_Seurat_filtered <- readRDS(file = "/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code/outputs/RDS_files/packer_Seurat_filtered.rds")
# Load the imputed/altered data from CellOracle
# Note 1: we work with the scaled data
# Note 2: when using the read_csv function, be super careful: _csv and .csv don't process "-" the same way and this could lead to mismatch in the data set
combined_KO_altered_expression <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code/outputs/imputed_scaled_count.csv") # Adjust for all the data created from CellOracle
packer_Seurat_filtered
library(Seurat)
library(tidyverse)
# Load Seurat object
packer_Seurat_filtered <- readRDS(file = "/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code/outputs/RDS_files/packer_Seurat_filtered.rds")
# Load the imputed/altered data from CellOracle
# Note 1: we work with the scaled data
# Note 2: when using the read_csv function, be super careful: _csv and .csv don't process "-" the same way and this could lead to mismatch in the data set
combined_KO_altered_expression <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code/outputs/imputed_scaled_count.csv") # Adjust for all the data created from CellOracle
# Mean the columns for all the cells
combined_KO_altered_expression_scaled_count_mean <- combined_KO_altered_expression %>%
select(-"...1") %>%
summarise_all(~mean(., na.rm = TRUE)) %>%
t() %>%
as.data.frame() %>%
rownames_to_column(var = "gene_name") %>%
rename(avg_counts = V1)
# Load gene annotation GTF file
gene_annotation_gtf <- read.table("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code/outputs/gene_annotation_gtf.txt", header = TRUE, sep = "\t")
# Merge result_data_frame with gene_annotation_gtf to map gene_id to each gene_name
merged_data_frame <- merge(combined_KO_altered_expression_scaled_count_mean, gene_annotation_gtf, all.x = TRUE) # left_join
# Count the number of NA gene_id
na_count <- sum(is.na(merged_data_frame))
# Filter rows where gene_id is NA
genes_without_id <- merged_data_frame[is.na(merged_data_frame$gene_id), ]
# Extract gene names that don't have a corresponding gene_id
gene_names_without_id <- genes_without_id$gene_name
# View gene names without a gene_id
print(gene_names_without_id)
# Create data frame that only contains the gene ids and the counts
combined_KO_altered_expression_scaled_count_mean_for_iMAT <- na.omit(
data.frame(
gene_id = merged_data_frame$gene_id,
avg_counts = merged_data_frame$avg_counts
)
) #normalised
# Load the genes ids from the GEM model
iCEL1314_genes <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code/outputs/iCEL1314_genes.csv")
# Check how many counts from imputed_scaled_count_mean are missing inside iCEL1314_genes
missing_genes <- !iCEL1314_genes$ID %in% imputed_scaled_count_mean_for_iMAT$gene_id
# Check how many counts from imputed_scaled_count_mean are missing inside iCEL1314_genes
missing_genes <- !iCEL1314_genes$ID %in% combined_KO_altered_expression_scaled_count_mean_for_iMAT$gene_id
missing_genes_df <- iCEL1314_genes[missing_genes, ]
View(missing_genes_df)
View(iCEL1314_genes)
View(combined_KO_altered_expression)
View(combined_KO_altered_expression)
averaged_t0_dauer_experimental_data <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Experimental_mean/averaged_t0_dauer_experimental_data.csv")
averaged_t0_dauer_experimental_data <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/All_cells/Experimental_mean/averaged_t0_dauer_experimental_data.csv")
averaged_t0_dauer_experimental_data <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Experimental_mean/All_cells/averaged_t0_dauer_experimental_data.csv")
merged_data_frame <- merge(averaged_t0_dauer_experimental_data,
gene_annotation_gtf,
by = "gene_name",
all.x = TRUE)
# Count the number of NA gene_id
na_count <- sum(is.na(merged_data_frame))
n
genes_without_id <- merged_data_frame[is.na(merged_data_frame$gene_id), ]
# Extract gene names that don't have a corresponding gene_id
gene_names_without_id <- genes_without_id$gene_name
# View gene names without a gene_id
print(gene_names_without_id)
# Create data frame that only contains the gene ids and the counts
averaged_t0_dauer_experimental_data_for_iMAT <- na.omit(
data.frame(
gene_id = merged_data_frame$gene_id,
avg_counts = merged_data_frame$avg_counts
)
) #normalised
missing_genes <- !iCEL1314_genes$ID %in% averaged_t0_dauer_experimental_data_for_iMAT$gene_id
missing_genes_df <- iCEL1314_genes[missing_genes, ]
gc()
clear
clear()
# Remove all saved variables
rm(list = ls())
gc()
library(ggplot2)
library(tidyr)
# load dataset
combined_KO_reactions_flux_table <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Results/ASJ_neurons/iMAT_FluxTable_Results/ASJ_neurons_combined_KO_altered_expression_flux_table.csv")
library(readr)
# load dataset
combined_KO_reactions_flux_table <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Results/ASJ_neurons/iMAT_FluxTable_Results/ASJ_neurons_combined_KO_altered_expression_flux_table.csv")
View(combined_KO_reactions_flux_table)
flux_distribution_plot <- ggplot(combined_KO_reactions_flux_table, aes(x = FluxValue)) +
geom_density(fill = "blue", alpha = 0.5) + # Using density plot for smooth distribution
geom_rug(alpha = 0.1) + # Adding rug plot for individual data points
labs(title = "Flux Value Distribution in Combined KO",
x = "Flux Value",
y = "Density") +
theme_minimal()
# Display the plot
flux_distribution_plot
# load dataset
all_cell_imputed_flux_table <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Results/All_cells/iMAT_FluxTable_Results/imputed_reactions_flux_table.csv")
# Create the distribution plot
flux_distribution_plot <- ggplot(all_cell_imputed_flux_table, aes(x = FluxValue)) +
geom_density(fill = "blue", alpha = 0.5) + # Using density plot for smooth distribution
geom_rug(alpha = 0.1) + # Adding rug plot for individual data points
labs(title = "Flux Value Distribution in Imoputed Counts for All Cells",
x = "Flux Value",
y = "Density") +
theme_minimal()
# Display the plot
flux_distribution_plot
all_cell_imputed_flux_table <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Results/All_cells/iMAT_FluxTable_Results/combined_KO_reactions_flux_table.csv")
# Create the distribution plot
flux_distribution_plot <- ggplot(all_cell_imputed_flux_table, aes(x = FluxValue)) +
geom_density(fill = "blue", alpha = 0.5) + # Using density plot for smooth distribution
geom_rug(alpha = 0.1) + # Adding rug plot for individual data points
labs(title = "Flux Value Distribution in Imoputed Counts for All Cells",
x = "Flux Value",
y = "Density") +
theme_minimal()
# Display the plot
flux_distribution_plot
flux_distribution_plot <- ggplot(all_cell_imputed_flux_table, aes(x = FluxValue)) +
geom_density(fill = "blue", alpha = 0.5) + # Using density plot for smooth distribution
geom_rug(alpha = 0.1) + # Adding rug plot for individual data points
labs(title = "Flux Value Distribution in Imputed Counts for All Cells",
x = "Flux Value",
y = "Density") +
theme_minimal()
# Display the plot
flux_distribution_plot
ll_cell_imputed_flux_table <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Results/All_cells/imputed_reactions_flux_table.csv")
all_cell_imputed_flux_table <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Results/All_cells/imputed_reactions_flux_table.csv")
all_cell_imputed_flux_table <- read_csv("/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code_local/outputs_local/Results/All_cells/iMAT_FluxTable_Results/imputed_reactions_flux_table.csv")
# Create the distribution plot
flux_distribution_plot <- ggplot(all_cell_imputed_flux_table, aes(x = FluxValue)) +
geom_density(fill = "blue", alpha = 0.5) + # Using density plot for smooth distribution
geom_rug(alpha = 0.1) + # Adding rug plot for individual data points
labs(title = "Flux Value Distribution in Imputed Counts for All Cells",
x = "Flux Value",
y = "Density") +
theme_minimal()
# Display the plot
flux_distribution_plot
# Save the plot
ggsave(
filename = "/Users/alaric/Desktop/Master_Thesis_Systems_Biology/Code/outputs/figures/flux_value_distribution_plot.png",
plot = flux_distribution_plot,
width = 8,
height = 6
)
